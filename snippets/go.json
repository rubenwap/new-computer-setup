{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Go struct type": {
		"prefix": [
			"struct",
		],
		"body": [
			"type ${1:name} struct {",
				"\t${2:element}\t${3:type}",
			"\t$0",
			"}"
		],
		"description": "Creates a struct type"
	},

		"Go interface": {
			"prefix": [
				"interface",
			],
			"body": [
				"type ${1:name} interface {",
				"\t${2:function}\t${3:return type}",
				"\t$0",
				"}"
			],
			"description": "Creates interface golang"
		},

				"Go method": {
					"prefix": [
						"method",
					],
					"body": [
						"func (${1:var and type}) ${2:method call} string {",
						"\treturn $0",
						"}"
						
					],
					"description": "Creates go method"
				},
						"Go Testing": {
							"prefix": [
								"gotest",
							],
							"body": [
								"func Test${1:function name}(t *testing.T) {",
									"",
									"$0",
									"}"
							],
							"description": "Test go"
						},

	"Go Map": {
		"prefix": [
			"gomap",
		],
		"body": [
			"m = make(map[${1:type key}]${2:type value})",
			"",
			"$0"
		
		],
		"description": "Map go"
	},


}